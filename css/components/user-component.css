/*
    말 그대로, user-component(제목과 같음) 클래스와 관련된 요소들만 모음.
    파생된 하위 클래스라던지, modifier라던지
*/

/*
    justify-content를 나중에 써도 성립이 된다. overriding하는 것이 아니기 때문에
*/
.user-component{
    justify-content: space-between;

}

.user-component,
.user-component__column:first-child{
    display:flex;
    align-items: center;
}

.user-component__avatar{
    width: 70px;
    height: 70px;
    border-radius: 30px;
    margin-right: 20px;
}

.user-component__title {
    font-weight: 600;
    font-size: 22px;
}


.user-component__subtitle {
    margin-top: 8px;
    color: rgba(0,0,0,0.5);
    font-size: 17px;
}

/*
    다음과 같은 클래스가 modifier이다. 기존 클래스와 완벽하게 같지만, 약간의 수정이 필요한 것 말이야.
    보통 기존 클래스와 함께 쓰인다.
    기능만 추가한다. modifier는 기존 클래스 뒤에 쓰여야 한다.(overriding의 원리)
*/
.user-component__avatar--xl{
    width: 80px;
    height: 80px;
}

.user-component__avatar--sm{
    width: 60px;
    height: 60px;
    border-radius: 25px;
}

.user-component__title--not-bold{
    font-weight: 400;
}



/*
    비록 해당하는 요소가 하나밖에 없지만, 그럼에도 의미가 있다.
    (position으로 조절하느니, align-item: flex-end 등으로 조정하는 게 낫다. 주용.
    tip: 내부에 있는 요소가 여러개라면 경우에 따라 div 안에 묶는 것도 요령이다. 
*/
.user-component__column:last-child {
    color: rgba(0,0,0,0.4);
    display:flex;
    flex-direction: column;
    align-items: flex-end;
}

.user-component__time{
    margin-bottom: 10px;
    display: block;
}


